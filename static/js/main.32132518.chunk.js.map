{"version":3,"sources":["App.tsx","components/Good.tsx","components/GoodsList.tsx","index.tsx"],"names":["SortType","Good","name","GoodsList","goods","map","good","indexOf","goodsFromServer","getReorderedGoods","sortType","isReversed","visibleGoods","ALPHABET","sort","g1","g2","localeCompare","LENGTH","length","reverse","App","state","NONE","sortAlphabetically","setState","sortByLength","previousIsRevesved","reset","this","isLight","buttonBaseClasses","alphabeticalButtonClasses","lengthButtonClasses","reverseButtonClasses","className","type","onClick","React","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"iKAkBYA,E,wFCdCC,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KACrB,OAAO,oBAAI,UAAQ,OAAZ,SAAoBA,KCChBC,EAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAC1B,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAMJ,KAAMI,GAAWF,EAAMG,QAAQD,UFJjDE,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeK,SAASC,EACdL,EADK,GAGJ,IADCM,EACF,EADEA,SAAUC,EACZ,EADYA,WAGNC,EAAY,YAAOR,GAQzB,OANIM,IAAaV,EAASa,SACxBD,EAAaE,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,cAAcD,MACtCN,IAAaV,EAASkB,QAC/BN,EAAaE,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGI,OAASH,EAAGG,UAGxCR,EAAaC,EAAaQ,UAAYR,G,SAzBnCZ,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAkCL,IAAMqB,EAAb,4MACEC,MAAyB,CACvBX,YAAY,EACZD,SAAUV,EAASuB,MAHvB,EAMEC,mBAAqB,WACnB,EAAKC,SAAS,CACZf,SAAUV,EAASa,YARzB,EAYEa,aAAe,WACb,EAAKD,SAAS,CACZf,SAAUV,EAASkB,UAdzB,EAkBEE,QAAU,WACR,IAAMO,EAAqB,EAAKL,MAAMX,WAEtC,EAAKc,SAAS,CACZd,YAAagB,KAtBnB,EA0BEC,MAAQ,WACN,EAAKH,SAAS,CACZd,YAAY,EACZD,SAAUV,EAASuB,QA7BzB,4CAiCE,WACE,MAAiCM,KAAKP,MAA9BZ,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WACZmB,EAAU,WACVC,EAAoB,aACpBC,EAAyB,eAAWtB,IAAaV,EAASa,SAAWiB,EAAU,IAC/EG,EAAmB,kBAAcvB,IAAaV,EAASkB,OAASY,EAAU,IAC1EI,EAAoB,kBAAcvB,EAAa,GAAKmB,GAE1D,OACE,sBAAKK,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,UAAKJ,GAAL,OAAyBC,GAClCK,QAASR,KAAKL,mBAHhB,iCAQA,wBACEY,KAAK,SACLD,UAAS,UAAKJ,GAAL,OAAyBE,GAClCI,QAASR,KAAKH,aAHhB,4BAQA,wBACEU,KAAK,SACLD,UAAS,UAAKJ,GAAL,OAAyBG,GAClCG,QAASR,KAAKT,QAHhB,sBAQEV,IAAaV,EAASuB,MAAQZ,IAC9B,wBACEyB,KAAK,SACLD,UAAS,UAAKJ,EAAL,kBAAgCD,GACzCO,QAASR,KAAKD,MAHhB,sBAUJ,cAAC,EAAD,CAAWxB,MAAOK,EAAkBD,EAAiBqB,KAAKP,gBA/ElE,GAAyBgB,IAAMC,eGjD/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.32132518.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodsList } from './components/GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort((g1, g2) => g1.localeCompare(g2));\n  } else if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((g1, g2) => g1.length - g2.length);\n  }\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.PureComponent {\n  state: Readonly<State> = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  sortAlphabetically = () => {\n    this.setState({\n      sortType: SortType.ALPHABET,\n    });\n  };\n\n  sortByLength = () => {\n    this.setState({\n      sortType: SortType.LENGTH,\n    });\n  };\n\n  reverse = () => {\n    const previousIsRevesved = this.state.isReversed;\n\n    this.setState({\n      isReversed: !previousIsRevesved,\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: SortType.NONE,\n    });\n  };\n\n  render() {\n    const { sortType, isReversed } = this.state;\n    const isLight = 'is-light';\n    const buttonBaseClasses = 'button is-';\n    const alphabeticalButtonClasses = `info ${sortType !== SortType.ALPHABET ? isLight : ''}`;\n    const lengthButtonClasses = `success ${sortType !== SortType.LENGTH ? isLight : ''}`;\n    const reverseButtonClasses = `warning ${isReversed ? '' : isLight}`;\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={`${buttonBaseClasses}${alphabeticalButtonClasses}`}\n            onClick={this.sortAlphabetically}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={`${buttonBaseClasses}${lengthButtonClasses}`}\n            onClick={this.sortByLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={`${buttonBaseClasses}${reverseButtonClasses}`}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className={`${buttonBaseClasses}danger ${isLight}`}\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <GoodsList goods={getReorderedGoods(goodsFromServer, this.state)} />\n      </div>\n    );\n  }\n}\n","type GoodProps = {\n  name: string\n};\n\nexport const Good = ({ name }: GoodProps) => {\n  return <li data-cy=\"Good\">{name}</li>;\n};\n","import { Good } from './Good';\n\ntype GoddsListProps = {\n  goods: string[]\n};\n\nexport const GoodsList = ({ goods }: GoddsListProps) => {\n  return (\n    <ul>\n      {goods.map(good => <Good name={good} key={goods.indexOf(good)} />)}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}